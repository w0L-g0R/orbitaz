"""
Django settings for energy_price_index project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from decouple import config

# ______________________________________________________________________________
# //////////////////////////////////////////////////////////////////////// PATHS

# The BASE_DIR path object resolves to "/src/orbitaz"
BASE_DIR = Path(__file__).resolve().parent.parent

# Place data to populate your database upfront in here
# NOTE: Path contains different subfolders for different formats
FILES_DIR = BASE_DIR / "files"
FIXTURES_DIR_XLSX = FILES_DIR / "xlsx"
FIXTURES_DIR_JSON = BASE_DIR / "app/fixtures"

# TODO: Remove this variable after implementing "temp" folder for caching download files
EEX_FILES_DIR = FILES_DIR / "eex"

# ______________________________________________________________________________
# ///////////////////////////////////////////////////////////////////// SETTINGS

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "orbitaz.app",
    "django_q",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "orbitaz.core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "orbitaz.core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
        "LOCATION": "127.0.0.1:11211",
    }
}

# The AUTOCOMMIT option set to True ensures all operations that alter data (i.e. Create, Update & Delete) run in their own transaction, and depending on the outcome, are automatically committed to a database if successful or rolled back if they fail.
# NOTE: If you set AUTOCOMMIT = False you'll need to explicitly declare commits.

# https://www.webforefront.com/django/modeltransactions.html

AUTOCOMMIT = True

# Django supports the ATOMIC_REQUESTS option which is disabled by default. The ATOMIC_REQUEST is used to open a transaction on every request made to a Django application. By setting ATOMIC_REQUEST=True, it ensures the data operations included in a request (i.e. view method) are committed only if a response is successful.

ATOMIC_REQUESTS = False

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

LOGGING = {
    "version": 1,
    # Version of logging
    "disable_existing_loggers": False,
    "formatters": {
        "Simple_Format": {
            "format": "{message}",
            "style": "{",
        }
    },
    "handlers": {
        # "file": {
        #     "level": "DEBUG",
        #     "class": "logging.FileHandler",
        #     "filename": BASE_DIR / "./logs/debug.log",
        #     "formatter": "Simple_Format",
        # },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": [
                # "file",
                "console"
            ],
            "level": "DEBUG",
        },
    },
}

# Configure your Q cluster
# More details https://django-q.readthedocs.io/en/latest/configure.html
Q_CLUSTER = {
    "name": "orbitaz",
    "workers": 1,
    "timeout": 10,
    "retry": 20,
    "queue_limit": 50,
    "bulk": 10,
    "orm": "default",
    "ack_failures": True,
    "max_attempts": 1,
    "attempt_count": 0,
}